package com.jbros.tagkosha

import android.app.Application
import com.jbros.tagkosha.BuildConfig
import timber.log.Timber

class TagKoshaApp : Application() {

    override fun onCreate() {
        super.onCreate()

        if (BuildConfig.DEBUG) {
            Timber.plant(TagKoshaDebugTree())
        } else {
            // Future-proof: For release builds, you can plant a tree that reports to a crash service.
            // Timber.plant(CrashReportingTree())
        }
    }

    /**
     * A custom Timber DebugTree that incorporates advanced debugging features:
     * 1. A custom global prefix for easy filtering in Logcat.
     * 2. Automatic method name and line number in the tag.
     * 3. Truncation of the tag to prevent logs from being dropped on long method names.
     */
    private class TagKoshaDebugTree : Timber.DebugTree() {

        private val logPrefix = "ajdebug-"
        private val maxTagLength = 75 // A safe length to avoid truncation issues.

        /**
         * CUSTOMIZATION 1: Add a global prefix to every log tag.
         * This allows for easy filtering in Logcat.
         */
        override fun log(priority: Int, tag: String?, message: String, t: Throwable?) {
            // The 'tag' parameter here is the one generated by createStackElementTag()
            super.log(priority, "$logPrefix$tag", message, t)
            // If you were to add your LogAnalyzer, you would call it here:
            // LogAnalyzer.logAnalyzer.addToLogs(message)
        }

        /**
         * CUSTOMIZATION 2: Generate a detailed tag and truncate it to a safe length.
         */
        override fun createStackElementTag(element: StackTraceElement): String {
            val fullTag = "(${element.fileName}:${element.lineNumber})#${element.methodName}"
            // Truncate the tag if it's too long, which prevents the log from being dropped.
            return if (fullTag.length > maxTagLength) fullTag.substring(0, maxTagLength) else fullTag
        }
    }
}